[project]
name = "adcircplot"
version = "0.0.0"
description = "A client package for plotting ADCIRC models"
authors = [
    { name = "Zach Cobell", email = "zcobell@thewaterinstitute.org" },
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.8"
keywords = [ "forecast", "meteorology", "stormsurge" ]
classifiers = [
    "Programming Language :: Python :: 3",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: Hydrology",
    "Operating System :: OS Independent",
]
dependencies = [
    "cartopy",
    "matplotlib",
    "xarray",
    "netcdf4",
    "numpy",
    "contextily",
    "pyyaml",
    "schema",
    "requests",
]

[project.urls]
"Homepage" = "https://github.com/waterinstitute/pyadcircviz"
"Bug Reports" = "https://github.com/waterinstitute/pyadcircviz/issues"
"Source" = "https://github.com/waterinstitute/pyadcircviz"

[build-system]
requires = [ "setuptools >= 61.0.0", "wheel" ]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = [ "src" ]

[tool.setuptools.dynamic]
version = { attr = "pyadcircviz.__version__" }

[project.scripts]
adcircplot = "adcircplot:adcirc_plot.adcirc_plot"

[tool.bumpver]
current_version = "0.0.0"
version_pattern = 'MAJOR.MINOR.PATCH[PYTAGNUM]'
commit_message = "bump version {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'current_version = "{version}"',
    'version = "{version}"',
]
"src/adcircplot/__init__.py" = [
    '__version__ = "{version}"',
]

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "PT004",  # Use underscore for non-returning fixture (use usefixture instead)
  "RET505", # Unnecessary return statement
  "RET506", # Unnecssary else
  "RET507", # Unnecessary else after continue
  "RET508", # Unnecssary elif after break
  "SIM108", # Use ternary operator
]
typing-modules = ["mypackage._compat.typing"]
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true

[tool.ruff.per-file-ignores]
"**/__init__.py" = ["F401"]
